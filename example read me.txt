Pokémon Victory Rate Predictor
Project Overview
Welcome to our Pokémon Victory Rate Predictor project! This project is dedicated to analyzing and predicting the outcomes of Pokémon battles using various data-driven techniques. Leveraging a comprehensive dataset of Pokémon characteristics and historical combat data, our goal is to develop a predictive model that accurately forecasts the victory rates of Pokémon in battles. This endeavor combines data processing, statistical analysis, and machine learning to create a robust predictive tool for Pokémon enthusiasts and analysts.

Key Pipelines and Modules
1. Data Loading and Preprocessing
This pipeline is crucial for setting the foundation of our analysis. It involves loading the Pokémon characteristics from pokemon.csv and battle outcomes from combats.csv. The preprocessing steps ensure that the data is clean, structured, and ready for analysis.
We also divide the work in very clear steps and then merge all of them in the main pipeline notebook where the results are presented.

2. Data Analysis and Visualization
In this section, we delve into the data, exploring various attributes of Pokémon, such as type, attack, defense, and special abilities. Utilizing libraries like Matplotlib and Seaborn, we create visualizations to understand trends, patterns, and correlations within the data.

3. Battle Data Processing
The core of our project, this module, implemented in the PokemonBattleProcessor class, processes the battle data. It calculates key statistics such as victory counts, total battles, and subsequently, the victory rates of each Pokémon. This module forms the basis for our predictive modeling.
The main challenge of this project was the use of various datasets as input for the prediction of our objective vriable.

4. Predictive Model Development
Here, we discuss the development of our predictive model. This section will detail the choice of model, feature selection, training process, and validation methods. Our goal is to build a model that can accurately predict the Pokémon battles victory rate based on their characteristics.
We define a parent class called Model, where each instance will be Machine Learning model, with other specific methods specified in child classes.

5. Model Evaluation 
In this final pipeline, we evaluate the performance of our predictive model using various metrics. We employ techniques like cross-validation and employ libraries such as Scikit-Learn for rigorous testing to ensure the reliability and accuracy of our predictions.
The two main metrics presented across the models are R-squared and Mean Squared Error.

6. Testing Module
This module ensures the reliability and correctness of our project's code and models. Using pytest, a Python testing framework, we conduct a series of automated tests, particularly focusing on data loading and feature engineering aspects.